Chapter 1 Notes - Zachary Jones
-------------------------------

General Notes:
--------------

Software failures are typically due to increasing technical demands and low initial expectations from the designers (not having a necessary amount of future-proofing)

Social expectations of faster software release cycles led into the convenience of web-based applications which do not need to be deployed to client computers - they can simply be accessed at any point via the internet.

3 main types of software system:
 1. Embedded system -- software which is strongly tied to a specific piece of hardware. Think microwaves, hair dryers, washing machines. Such devices do not need "general computing" capabilites and so their software is "embedded" into the devices themselves.
 2. Information System -- software which is a steward to some quantity of information, granting access to and searching within to provide what a user is looking for. Games can fall into this category, with the understanding that the data being managed is rarely added to, and the data provided includes a wide variety of information (audio, visual, textual)
 3. Sensor-Based data collection system -- somewhat similar to embedded systems, but with the key difference of being designed to absorb and process some unknown quantity of information in a specific format (x-ray, blood levels, air/barometric data)

Exercises to complete:
----------------------

1.1. Explain why professional software is not just the programs that are developed for a customer.
- Software engineering as a discipline involves everything involved in making a quality program. Planning the implementation details, managing the documentation surrounding the software, changing or optimizing features to improve a user's acceptance and use of the program

1.3. What are the four important attributes that all professional software should have? Suggest four other attributes that may sometimes be significant.
 - The four attributes are: Maintainability, Dependability/Security, Efficiency and Acceptability.
 - Resilient - software should be able to take any kind of strange input from a user and continue working without interruption. When inputs are bad, it does not have to use them, but it must not crash or stop working often.
 - Cost-Effectiveness - Software is often a costly thing to build, both in time and money. A program should be worthwhile for the time, effort and money spent on it's creation. When it is not, it could indicate a project made for art's sake or it could indicate a project which did not have a clear vision.
 - Ethics - Software can model anything, given enough thought and development time. Creating a program which takes advantage of users or intentionally causes real harmm is questionable at best. With so much potential in the field, it would be best used as something to uplift humanity.
 - Easily testable - Software may as well be worthless without ways to verify it's function. Using software to test software is a practice that gives reassurance to user and developer alike that the promises made by the program are upheld and acted upon. When it is difficult to test, promises are forgotten and features left defunct.

1.6. Explain why there are fundamental ideas of software engineering that apply to all types of software systems.
 - There are fundamental ideas of software engineering because the ways that it is designed, built and distributed for end-users is very similar despite the differences in purpose. For example, there will always be calls for improvement upon existing systems, and by designing all kinds of software to gracefully accept improvements and use them without delays we can always utlize that design principle to adapt to changing demands.